package nitriding

import (
	"crypto/rand"
	"errors"
	"testing"
	"time"
)

func failOnErr(t *testing.T, err error) {
	t.Helper()
	if err != nil {
		t.Fatal(err)
	}
}

func TestBoxKeyRandomness(t *testing.T) {
	k1, err := newBoxKey()
	failOnErr(t, err)
	k2, err := newBoxKey()
	failOnErr(t, err)

	// It's notoriously difficult to test if something is truly random.  Here,
	// we simply make sure that two subsequently generated key pairs are not
	// identical.  That's a low bar to pass but better than nothing.
	if k1.privKey == k2.privKey {
		t.Error("Private keys of two separate box keys are identical.")
	}
	if k1.pubKey == k2.pubKey {
		t.Error("Public keys of two separate box keys are identical.")
	}
}

func TestBoxKeySerialization(t *testing.T) {
	// Make sure that serialization and subsequent deserialization of a public
	// key results in the same public key.
	k1, err := newBoxKey()
	failOnErr(t, err)
	k2, err := newBoxKeyFromBytes(k1.Bytes())
	failOnErr(t, err)

	if *k1.pubKey != *k2.pubKey {
		t.Fatal("Key no longer identical after encoding and decoding.")
	}

	// Finally, make sure that newBoxKeyFromBytes fails if we provide an empty
	// byte slice.
	if _, err = newBoxKeyFromBytes([]byte{}); err == nil {
		t.Fatal("Expected an error because no bytes were provided.")
	}
}

func TestNonce(t *testing.T) {
	n1, err := newNonce()
	failOnErr(t, err)
	n2, err := newNonce()
	failOnErr(t, err)

	if n1 == n2 {
		t.Error("Two separately generated nonces are identical.")
	}
	if n1.B64() == n2.B64() {
		t.Error("Two separately generated Base64-encoded nonces are identical.")
	}
}

func TestErrors(t *testing.T) {
	// Make cryptoRead always return an error, and check if functions propagate
	// that error.
	ourError := errors.New("not enough randomness")
	cryptoRead = func(b []byte) (n int, err error) {
		return 0, ourError
	}
	defer func() {
		cryptoRead = rand.Read
	}()

	if _, err := newNonce(); err == nil {
		t.Error("Failed to return error")
		if !errors.Is(err, ourError) {
			t.Error("Propagated error does not contain expected error string.")
		}
	}
}

func getResponderAttDoc() (time.Time, string) {
	t, _ := time.Parse(time.RFC3339, "2022-07-27T05:00:00Z")

	// The following attestation document was generated on 2022-07-27 and
	// contains a nonce (set to all 0 bytes) and user data (contains encrypted
	// key information).
	return t, `
hEShATgioFkRG6lpbW9kdWxlX2lkeCdpLTA4MDk4NDk3MTBiZjFiNjFiLWVuYzAxODIzZDY0M2U2Mzl
hYTBmZGlnZXN0ZlNIQTM4NGl0aW1lc3RhbXAbAAABgj1kWVpkcGNyc7AAWDCwYbzjGoVQwky4wdwOU5
jlyA+rpn91/TsGIcC4Zjb84NZMTX03R4kI4fj86d9m4bkBWDC83wX+/Mqo5VvyyNbe6eebv/MeNL8oq
Zqhnmspw37oCyFKQUt2ByNu3yb8t4ZU5j8CWDBq5nl210A4DVBkNpGsOq67pg8n17ig4anq8jhtJe6r
iBwJrMXICevs+ZtJcQX2y1sDWDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAEWDDYqOju6W2Bt3olFBC3qbGAeHZT8SXR28p5aFyT+4hbM14LjRcsmCGoYlFaYDzDOr
IFWDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGWDAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHWDAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIWDAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJWDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAKWDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAALWDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAMWDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANWDAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOWDAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPWDAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABrY2VydGlmaWNhdGVZAn8wggJ7MIICAaADAgECAhAB
gj1kPmOaoAAAAABi4JzCMAoGCCqGSM49BAMDMIGOMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGl
uZ3RvbjEQMA4GA1UEBwwHU2VhdHRsZTEPMA0GA1UECgwGQW1hem9uMQwwCgYDVQQLDANBV1MxOTA3Bg
NVBAMMMGktMDgwOTg0OTcxMGJmMWI2MWIudXMtZWFzdC0yLmF3cy5uaXRyby1lbmNsYXZlczAeFw0yM
jA3MjcwMjAyMzlaFw0yMjA3MjcwNTAyNDJaMIGTMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGlu
Z3RvbjEQMA4GA1UEBwwHU2VhdHRsZTEPMA0GA1UECgwGQW1hem9uMQwwCgYDVQQLDANBV1MxPjA8BgN
VBAMMNWktMDgwOTg0OTcxMGJmMWI2MWItZW5jMDE4MjNkNjQzZTYzOWFhMC51cy1lYXN0LTIuYXdzMH
YwEAYHKoZIzj0CAQYFK4EEACIDYgAE7il+oEijv6hrLpdsG4T/TbjSNxla6LnM2/2IGyCFNblCghVv1
VNv7JF1zu+pP4jT7VbeVEj2z5T0lQMc/bLLxXUcbVlaA8qzAIX5yTkwAA53zU6m7frzvWVwdSuSNvXw
ox0wGzAMBgNVHRMBAf8EAjAAMAsGA1UdDwQEAwIGwDAKBggqhkjOPQQDAwNoADBlAjEAiKzrNPjQug4
lt4wfSuIxvyr4BoiS0en2pLM7NtI9QnQKwXKT7V1Rk4oKr7zVBeiJAjAMnKjSMZn3cID2nL55qgoeCF
0PXntyuGXwkh8J5bsN5BUKP38CiqmONjvyxPOiQWpoY2FidW5kbGWEWQIVMIICETCCAZagAwIBAgIRA
PkxdWgbkK/hHUbMtOTn+FYwCgYIKoZIzj0EAwMwSTELMAkGA1UEBhMCVVMxDzANBgNVBAoMBkFtYXpv
bjEMMAoGA1UECwwDQVdTMRswGQYDVQQDDBJhd3Mubml0cm8tZW5jbGF2ZXMwHhcNMTkxMDI4MTMyODA
1WhcNNDkxMDI4MTQyODA1WjBJMQswCQYDVQQGEwJVUzEPMA0GA1UECgwGQW1hem9uMQwwCgYDVQQLDA
NBV1MxGzAZBgNVBAMMEmF3cy5uaXRyby1lbmNsYXZlczB2MBAGByqGSM49AgEGBSuBBAAiA2IABPwCV
OumCMHzaHDimtqQvkY4MpJzbolL//Zy2YlES1BR5TSksfbb48C8WBoyt7F2Bw7eEtaaP+ohG2bnUs99
0d0JX28TcPQXCEPZ3BABIeTPYwEoCWZEh8l5YoQwTcU/9KNCMEAwDwYDVR0TAQH/BAUwAwEB/zAdBgN
VHQ4EFgQUkCW1DdkFR+eWw5b6cp3PmanfS5YwDgYDVR0PAQH/BAQDAgGGMAoGCCqGSM49BAMDA2kAMG
YCMQCjfy+Rocm9Xue4YnwWmNJVA44fA0P5W2OpYow9OYCVRaEevL8uO1XYru5xtMPWrfMCMQCi85sWB
bJwKKXdS6BptQFuZbT73o/gBh1qUxl/nNr12UO8Yfwr6wPLb+6NIwLz3/ZZAsIwggK+MIICRKADAgEC
AhA990CB9kGNMZfvZChwdlgnMAoGCCqGSM49BAMDMEkxCzAJBgNVBAYTAlVTMQ8wDQYDVQQKDAZBbWF
6b24xDDAKBgNVBAsMA0FXUzEbMBkGA1UEAwwSYXdzLm5pdHJvLWVuY2xhdmVzMB4XDTIyMDcyNTA2ND
gwOFoXDTIyMDgxNDA3NDgwOFowZDELMAkGA1UEBhMCVVMxDzANBgNVBAoMBkFtYXpvbjEMMAoGA1UEC
wwDQVdTMTYwNAYDVQQDDC05ZjJmYTNhYWRlZTBhMzZhLnVzLWVhc3QtMi5hd3Mubml0cm8tZW5jbGF2
ZXMwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAASJrZH+NsENK8xQ+r4qIT56spgyQ0rqLuQOUv7CmfHg19Z
giX4k1tUbTIGc1hFVphxMaahoM6N3e1mBRMkX9Y/gxYmPnSrom/cq6BnWW8yYWpocaFuXqq/VjOJ9Ba
TcO4qjgdUwgdIwEgYDVR0TAQH/BAgwBgEB/wIBAjAfBgNVHSMEGDAWgBSQJbUN2QVH55bDlvpync+Zq
d9LljAdBgNVHQ4EFgQUPZaPBc+bF0kz5B3MQi4KoWP+hRIwDgYDVR0PAQH/BAQDAgGGMGwGA1UdHwRl
MGMwYaBfoF2GW2h0dHA6Ly9hd3Mtbml0cm8tZW5jbGF2ZXMtY3JsLnMzLmFtYXpvbmF3cy5jb20vY3J
sL2FiNDk2MGNjLTdkNjMtNDJiZC05ZTlmLTU5MzM4Y2I2N2Y4NC5jcmwwCgYIKoZIzj0EAwMDaAAwZQ
IxANMhikJw9gtb6vBdlgVKT1gOgX8g8HhmL764kGCqNUcQEx87vPMhiVamVtUsCIB/awIwbV4Neqsy1
H4Cq3JWZG9lR2+D8s+nMCVDpUlThEK2K8p0EJP5lPF8N5e0V8oZuA0JWQMYMIIDFDCCApqgAwIBAgIQ
NF6Fd19DpZgwKsWQtzHX8TAKBggqhkjOPQQDAzBkMQswCQYDVQQGEwJVUzEPMA0GA1UECgwGQW1hem9
uMQwwCgYDVQQLDANBV1MxNjA0BgNVBAMMLTlmMmZhM2FhZGVlMGEzNmEudXMtZWFzdC0yLmF3cy5uaX
Ryby1lbmNsYXZlczAeFw0yMjA3MjYxMTQ1MDBaFw0yMjA4MDEwNDQ0NTlaMIGJMTwwOgYDVQQDDDM0M
TE4MGUyNmU3ZWNjNWY0LnpvbmFsLnVzLWVhc3QtMi5hd3Mubml0cm8tZW5jbGF2ZXMxDDAKBgNVBAsM
A0FXUzEPMA0GA1UECgwGQW1hem9uMQswCQYDVQQGEwJVUzELMAkGA1UECAwCV0ExEDAOBgNVBAcMB1N
lYXR0bGUwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAARay8thWSHgPinGev1LSpKiNMhpY3uGlzdNtGrl4D
vRC3tYm3e4y1WC8zjR96rPEPqPaImtmJ4GuXUC8oP5u1g4Cr4jFqqL4KwvwvZFeOhY5FdIEidNByaFQ
1PmdLWM7OGjgeowgecwEgYDVR0TAQH/BAgwBgEB/wIBATAfBgNVHSMEGDAWgBQ9lo8Fz5sXSTPkHcxC
LgqhY/6FEjAdBgNVHQ4EFgQUQjKkC8oNyrWpWkdVSGw8wOOYa9IwDgYDVR0PAQH/BAQDAgGGMIGABgN
VHR8EeTB3MHWgc6Bxhm9odHRwOi8vY3JsLXVzLWVhc3QtMi1hd3Mtbml0cm8tZW5jbGF2ZXMuczMudX
MtZWFzdC0yLmFtYXpvbmF3cy5jb20vY3JsLzI1NDY2N2JmLWY2ZDMtNDNlZS1iMGNiLTYyZWNmZWNiZ
TZmMS5jcmwwCgYIKoZIzj0EAwMDaAAwZQIxAKuYyI19bA8mHLo88O1epcirSbOfK348e6SbhdyJazZb
cIkko5zyvgKmskjACB2IpwIwVo0cIeP+2C4L+5CW8iVr5DrRVhtESi+qta4DzYNJlUXl2X3HiV23fqz
2/3XY9uyqWQKCMIICfjCCAgSgAwIBAgIUfFo+I5v6VGh7k5qouGsLv7Mv57owCgYIKoZIzj0EAwMwgY
kxPDA6BgNVBAMMMzQxMTgwZTI2ZTdlY2M1ZjQuem9uYWwudXMtZWFzdC0yLmF3cy5uaXRyby1lbmNsY
XZlczEMMAoGA1UECwwDQVdTMQ8wDQYDVQQKDAZBbWF6b24xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJX
QTEQMA4GA1UEBwwHU2VhdHRsZTAeFw0yMjA3MjYxNzIyMThaFw0yMjA3MjcxNzIyMThaMIGOMQswCQY
DVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3RvbjEQMA4GA1UEBwwHU2VhdHRsZTEPMA0GA1UECgwGQW
1hem9uMQwwCgYDVQQLDANBV1MxOTA3BgNVBAMMMGktMDgwOTg0OTcxMGJmMWI2MWIudXMtZWFzdC0yL
mF3cy5uaXRyby1lbmNsYXZlczB2MBAGByqGSM49AgEGBSuBBAAiA2IABHauNrI7BTIweN+zwPt+cchE
nzuRwHLILTAHh3OTa47tKPrx5siwKIwhkjOvzAN82o4MzgUmqtfQ0yrntfrox2be5qzKx7U26aatS5G
JR/STHSjtoeKZn5FLMYysMJM00KMmMCQwEgYDVR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAg
QwCgYIKoZIzj0EAwMDaAAwZQIxAK5vbx5ZauD2RpeK2+v3u37cc9imCrMvF1JY4zbZ3ZZQ8UYa/HjnP
iB3pGd8whiA7wIwNiE2h4KKQEhF4Ory87EpxJCT39uXxVByr5TWQ89Ruj1rB2JSXU1psJ8GxlCkcBVD
anB1YmxpY19rZXn2aXVzZXJfZGF0YVhI4nBS+mXu8vE1TpAF0X8GLthggVJB44h4AnNzMvCtD3Qlagn
FYcA3/G9DXSk1uaaVLTm/O4nVtbjo4MaU8C2rqO94hvbTrml7ZW5vbmNlVAAAAAAAAAAAAAAAAAAAAA
AAAAAAWGDMVPwPgNQE0B4IvYVyzsWa6IguwPxu4RrKW7SzNkcv9b0RySXdAAPD071+Ju6Ic8Pr4EOyd
ac+wcqKQm4ZH3U5+yel2+YU33Tq/WvX1Ra2xmQsgQj3xqcL9XMBbdmNW8M=`
}
